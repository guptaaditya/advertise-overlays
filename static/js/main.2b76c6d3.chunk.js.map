{"version":3,"sources":["blocks/box/index.js","blocks/button/index.js","blocks/centercontainer/index.js","blocks/form/index.js","utils/helper.js","blocks/formField/index.js","blocks/input/index.js","blocks/view/index.js","blocks/sidebar/sidebar.js","blocks/sidebar/index.js","components/centercontainercard/index.js","utils/ui.js","components/loginforms/login.js","components/loginforms/signup.js","components/loginforms/forgotpassword.js","components/loginforms/verification.js","components/loginforms/resetpassword.js","modules/login/signin/login.js","modules/login/actiontypes.js","modules/login/actions.js","modules/redirect/actiontypes.js","modules/redirect/actions.js","modules/login/signin/index.js","modules/login/signup/signup.js","modules/login/signup/index.js","modules/login/forgotpassword/forgotpassword.js","modules/login/forgotpassword/index.js","modules/login/verification/verification.js","modules/login/verification/index.js","modules/login/resetpassword/resetpassword.js","modules/login/resetpassword/index.js","components/sidebar/sidebar.js","modules/dashboard/dashboard.js","modules/redirect/redirect.js","modules/redirect/index.js","modules/links/links.js","modules/links/index.js","modules/router/privateroute.js","modules/router/index.js","modules/router/routes.js","modules/redirect/reducer.js","modules/router/actiontypes.js","modules/router/reducer.js","modules/login/reducer.js","app/reducers.js","modules/login/saga.js","modules/router/actions.js","modules/redirect/saga.js","app/sagas.js","app/index.js","app/store.js","serviceWorker.js","index.js"],"names":["Box","props","children","boxProps","Container","ButtonBlock","type","Checkbox","label","Button","ButtonGroup","groupProps","Group","ButtonOr","buttonOrProps","Or","CenterContainer","cols","Grid","columns","textAlign","style","height","verticalAlign","Column","width","FormBlock","formProps","Form","FormGroup","formGroupProps","storage","window","localStorage","tokenKey","ComponentWrapper","Component","additionalProps","remainingProps","ComponentProps","FormFieldWrapper","Field","FormInput","Input","InputBlock","iconType","inputProps","icon","View","viewProps","defaults","as","Menu","vertical","animation","inverted","visible","MenuItem","item","className","isImage","clickHandler","onClick","_","noop","Item","Image","centered","src","size","active","Icon","name","SidebarBlock","Sidebar","SidebarPushable","Pushable","Segment","SidebarPusher","Pusher","React","CollapsedSidebarMenu","Logo","logo","text","alt","MenuItems","menuItems","map","index","key","onHover","collapsed","topMenuItems","reject","bottomMenuItems","filter","length","fixed","id","CenterContainerCard","centerContainerProps","iziToast","require","ToastFactory","init","toastSettings","timeout","resetOnHover","position","close","closeOnEscape","transitionIn","transitionOut","getToast","settings","showToast","view","sanitizedType","toLowerCase","typeMethod","indexOf","toastInfo","title","message","Login","state","isRememberActive","handleRememberClick","setState","prevState","onRemember","handleLoginClick","input","getUserInput","validateUserInput","onLogin","username","document","getElementById","value","password","trim","this","onSignupClick","onForgotPasswordClick","onSubmit","isLine","placeholder","toggle","primary","defaultProps","Signup","handleSignupClick","onSignup","form","forms","firstname","querySelector","lastname","confirmpassword","onSigninClick","widths","fluid","ForgotPassword","handleForgotPasswordClick","onForgotPassword","useremail","onRedirect","Verification","handleVerificationCodeSubmitClick","onSubmitVerificationCode","verificationCode","onResendVerificationCode","emailAddress","ResetPassword","handleResetPasswordClick","onResetPasswordClick","handleRemember","remember","handleLogin","userInput","redirectTo","URLSearchParams","location","search","get","handleSignup","signupPath","handleForgotPassword","forgotpasswordPath","withRouter","ON_LOGIN","ON_SIGNUP","ON_FORGOT_PASSWORD","ON_FORGOT_PASSWORD_SUCCESS","ON_VERIFICATION_CODE_SUBMIT","ON_RESEND_VERIFICATION_CODE","ON_RESET_PASSWORD","onForgotPasswordSuccess","actionTypes","REDIRECT_TO","url","connect","dispatch","redirectUrl","actions","handleSignin","signinPath","VerificationCode","handleVerificationCodeSubmit","code","onVerificationCodeSubmit","handleResendVerificationCode","userManagement","resetPasswordForUserEmail","handleResetPassword","onResetPassword","bottom","expand","collapse","SidebarComponent","handleContractMenu","e","assign","handleExpandMenu","forceUpdate","Dashboard","RedirectTo","currentUrl","history","push","redirectToUrl","redirect","shouldRedirect","PureComponent","currentURL","Links","PrivateRoute","isAuthenticated","getIsAuthenticated","path","onRedirectToLogin","rest","auth","redirectBackTo","Routes","basename","exact","to","initialState","prevURL","ON_AUTHENTICATION_SUCCESS","token","combineReducers","action","actionypes","Promise","resolve","put","redirectActions","console","log","userInputs","takeLatest","sagaMiddleware","sagas","loginSagas","redirectSagas","store","createStore","combinedReducers","getItem","loadStateToken","compose","applyMiddleware","createTaleMiddleware","subscribe","getState","setItem","saga","run","initStore","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b76c6d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\n\r\nexport function Box(props) {\r\n    const { children, ...boxProps } = props;\r\n    return (\r\n        <Container {...boxProps}>\r\n            {children}\r\n        </Container>\r\n    );\r\n}","import React from 'react';\r\nimport { Button, Checkbox } from 'semantic-ui-react';\r\n\r\nexport function ButtonBlock(props) {\r\n    if (props.type === 'checkbox') {\r\n        return <Checkbox label={props.label} />\r\n    }\r\n    return (\r\n        <Button {...props}>\r\n            {props.children}\r\n        </Button>\r\n    );\r\n}\r\n\r\nexport function ButtonGroup(props)  {\r\n    const { children, ...groupProps } = props;\r\n    return (\r\n        <Button.Group {...groupProps}>\r\n            {children}\r\n        </Button.Group>\r\n    );\r\n}\r\n\r\nexport function ButtonOr(props) {\r\n    const { children, ...buttonOrProps } = props;\r\n    return (\r\n        <Button.Or {...buttonOrProps}>\r\n            {children}\r\n        </Button.Or>\r\n    );\r\n}","import React from 'react';\r\nimport { Grid } from 'semantic-ui-react'\r\n\r\nexport function CenterContainer(props) {\r\n    const { cols = 6} = props;\r\n    return (\r\n        <Grid columns='equal' textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n            <Grid.Column width={cols}>\r\n                {props.children}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport { Form } from 'semantic-ui-react';\r\n\r\nexport function FormBlock(props) {\r\n    const { children, ...formProps } = props;\r\n    return (\r\n        <Form {...formProps}>\r\n            {children}\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport function FormGroup(props) {\r\n    const { children, ...formGroupProps } = props;\r\n    return (\r\n        <Form.Group {...formGroupProps}>\r\n            {children}\r\n        </Form.Group>\r\n    )\r\n}","import React from 'react';\r\nconst storage = window.localStorage;\r\nconst tokenKey = 'utv.auth.hash';\r\n\r\nexport default function ComponentWrapper(Component, additionalProps = {}) {\r\n    return function(props) {\r\n        const { children, ...remainingProps } = props;\r\n        const ComponentProps = {\r\n            ...additionalProps,\r\n            ...remainingProps,\r\n        }\r\n        return (\r\n            <Component {...ComponentProps}>\r\n                {children}\r\n            </Component>\r\n        );\r\n    }\r\n}\r\n\r\nexport function loadStateToken() {\r\n    const token = storage.getItem(tokenKey);\r\n    if(token) {\r\n        return {\r\n            auth: {\r\n                isAuthenticated: true\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nexport function saveStateToken(state) {\r\n  storage.setItem(tokenKey, state.auth.token);\r\n}","import React from 'react';\r\nimport { Form } from 'semantic-ui-react';\r\nimport ComponentWrapper from 'utils/helper';\r\n\r\nexport const FormFieldWrapper = ComponentWrapper(Form.Field);\r\n\r\nexport const FormInput = ComponentWrapper(Form.Input);","import React from 'react';\r\nimport { Input } from 'semantic-ui-react';\r\n\r\nexport function InputBlock(props) {\r\n    const { iconType, ...inputProps } = props;\r\n    return (\r\n        <Input icon={props.iconType} {...inputProps} />\r\n    );\r\n}","import React from 'react';\r\n\r\nexport function View(props) {\r\n    const { children, ...viewProps } = props;\r\n    return (\r\n        <div {...viewProps}>\r\n            {children}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport _ from 'lodash';\r\nimport { Sidebar, Segment, Menu, Icon, Image } from 'semantic-ui-react';\r\n\r\nimport ComponentWrapper from 'utils/helper';\r\n\r\nconst defaults = {\r\n    as: Menu,\r\n    vertical: true,\r\n    animation: 'overlay',\r\n    inverted: true,\r\n    visible: true,\r\n    width: 'thin',\r\n};\r\n\r\nfunction MenuItem(props) {\r\n    const { item, className = '' } = props;\r\n    const isImage = item.as === 'Image';\r\n    const clickHandler = item.onClick || _.noop;\r\n    if (isImage) {\r\n        return (\r\n            <Menu.Item className={className} onClick={clickHandler}>\r\n                <Image centered src={item.src} size='tiny' />\r\n            </Menu.Item>\r\n        );\r\n    }\r\n    return (\r\n        <Menu.Item className={className} active={item.active} onClick={clickHandler}>\r\n            {item.icon && <Icon name={item.icon} />}\r\n            {item.label}\r\n        </Menu.Item>\r\n    );\r\n}\r\n\r\n\r\nexport const SidebarBlock = ComponentWrapper(Sidebar, defaults);\r\nexport const SidebarPushable = ComponentWrapper(Sidebar.Pushable, { as: Segment });\r\nexport const SidebarPusher = ComponentWrapper(Sidebar.Pusher);\r\nexport class SidebarCombined extends React.Component {\r\n    render() {\r\n        const { visible: v, animation: a } = defaults;\r\n        const { \r\n            items, children, applicationContent, visible=v, animation=a,\r\n            onMenuClick, expanded\r\n        } = this.props;\r\n        const content = children || applicationContent;\r\n        const sidebarProps = {\r\n            visible,\r\n            animation,\r\n            onClick: onMenuClick\r\n        };\r\n        if (!expanded) {\r\n            return <CollapsedSidebarMenu {...sidebarProps} />\r\n        }\r\n        return (\r\n            <SidebarPushable>\r\n                <SidebarBlock {...sidebarProps}>\r\n                    {_.map(items, item => <MenuItem item={item} />)}\r\n                </SidebarBlock>\r\n                {content && (\r\n                    <SidebarPusher dimmed={visible}>\r\n                        <Segment basic>\r\n                            {content}\r\n                        </Segment>\r\n                    </SidebarPusher>\r\n                )}\r\n            </SidebarPushable>\r\n        );\r\n    }\r\n}\r\n\r\nfunction CollapsedSidebarMenu(props) {\r\n    return (\r\n        <SidebarPushable>\r\n            <SidebarBlock { ...{...props, width: 'very thin' } }>\r\n                <MenuItem className='bottom-sidebar-menu-item' item={{ icon: 'arrow alternate circle right' }} />)}\r\n            </SidebarBlock>\r\n        </SidebarPushable>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { Container, Icon, Image, Menu } from \"semantic-ui-react\";\r\n\r\nfunction Logo(props) {\r\n  const {\r\n    logo: { src, text = \"\", className = \"\", onClick = _.noop } = {}\r\n  } = props;\r\n  if (src) {\r\n    return (\r\n      <Image\r\n        alt={text}\r\n        size=\"mini\"\r\n        src={src}\r\n        className={className}\r\n        onClick={onClick}\r\n      />\r\n    );\r\n  } else if (text) {\r\n    return (\r\n      <div className={className} onClick={onClick}>\r\n        {text}\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction MenuItems(props) {\r\n  const { menuItems = [] } = props;\r\n  return (\r\n    <>\r\n      {_.map(\r\n        menuItems,\r\n        ({ as = \"a\", icon = \"\", label = \"\", onClick = _.noop }, index) => {\r\n          if (icon || label) {\r\n            return (\r\n              <Menu.Item as={as} key={index} onClick={onClick}>\r\n                {icon && <Icon name={icon} />}\r\n                <span>{label}</span>\r\n              </Menu.Item>\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default function Sidebar(props) {\r\n  const { logo, menuItems = [], onHover = _.noop, collapsed } = props;\r\n  const topMenuItems = _.reject(menuItems, \"bottom\");\r\n  const bottomMenuItems = _.filter(menuItems, \"bottom\");\r\n  if (topMenuItems && topMenuItems.length) {\r\n    return (\r\n      <Menu\r\n        icon=\"labeled\"\r\n        fixed=\"left\"\r\n        inverted\r\n        vertical\r\n        id=\"leftNavigationBar\"\r\n        onHover={onHover}\r\n        className={collapsed && \"collapsed\"}\r\n      >\r\n        <Container className=\"top\">\r\n          {logo && (\r\n            <Menu.Item as=\"a\" className=\"logo\">\r\n              <Logo logo={logo} />\r\n            </Menu.Item>\r\n          )}\r\n          <MenuItems menuItems={topMenuItems} />\r\n        </Container>\r\n\r\n        {bottomMenuItems && (\r\n          <Container>\r\n            <MenuItems menuItems={bottomMenuItems} />\r\n          </Container>\r\n        )}\r\n      </Menu>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n","import React from 'react';\r\nimport { CenterContainer } from 'blocks';\r\n\r\nexport function CenterContainerCard(props) {\r\n    const { children, ...centerContainerProps } = props;\r\n    return (\r\n        <CenterContainer {...centerContainerProps}>\r\n            {children}\r\n        </CenterContainer>\r\n    )\r\n}","const iziToast = require('izitoast');\r\n\r\nconst ToastFactory = (function () {\r\n    let init = false;\r\n    const toastSettings = {\r\n        timeout: 3000,\r\n        resetOnHover: true,\r\n        position: 'topRight',\r\n        close: true,\r\n        closeOnEscape: true,\r\n        transitionIn: 'flipInX',\r\n        transitionOut: 'flipOutX',\r\n    };\r\n    return {\r\n        getToast: function () {\r\n            if (!init) {\r\n                iziToast.settings(toastSettings);\r\n                init = true;\r\n            }\r\n            return iziToast;\r\n        }\r\n    };\r\n})();\r\n\r\nexport function showToast(view, type = '', settings = {}) {\r\n    const allowedTypes = ['success', 'info', 'error', 'warning'];\r\n    //type could be success, info, error, warning\r\n    /*\r\n        When view is a string, its a message without title,\r\n        When view is a object with title and message property use it as it is.\r\n    */\r\n    const sanitizedType = type.toLowerCase();\r\n    const typeMethod = allowedTypes.indexOf(sanitizedType) > -1 ? sanitizedType : 'show';\r\n    const toastInfo = {\r\n        title: view.title || '',\r\n        message: view.message || view || '',\r\n        ...settings,\r\n    };\r\n    ToastFactory.getToast()[typeMethod](toastInfo);\r\n};\r\n\r\nexport const onLogin = (props) => {\r\n    showToast('Message', 'success');\r\n    props.history.push('/next-url');\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport { CenterContainerCard } from 'components/centercontainercard';\r\nimport { Input, Form, FormField, Box, Button, View } from 'blocks';\r\nimport { showToast } from 'utils/ui';\r\n\r\nexport default class Login extends React.Component {\r\n    state = {\r\n        isRememberActive: false,\r\n    };\r\n\r\n    handleRememberClick = () => {\r\n        this.setState(prevState => ({ isRememberActive: !prevState.isRememberActive }), () => {\r\n            const { onRemember } = this.props;\r\n            onRemember(this.state.isRememberActive);\r\n        });\r\n    }\r\n\r\n    handleLoginClick = () => {\r\n        const input = this.getUserInput();\r\n        if (this.validateUserInput(input)) {\r\n            this.props.onLogin(input);\r\n        }\r\n    }\r\n\r\n    getUserInput() {\r\n        const username = document.getElementById('username').value;\r\n        const password = document.getElementById('password').value;\r\n        return {\r\n            username,\r\n            password\r\n        };\r\n    }\r\n\r\n    validateUserInput({ username, password }) {\r\n        if (!username.trim()) {\r\n            showToast('Username cannot be empty', 'error');\r\n            return false;\r\n        } else if (!password.trim()) {\r\n            showToast('Password cannot be empty', 'error');\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        const { isRememberActive } = this.state;\r\n        const { onSignupClick, onForgotPasswordClick } = this.props;\r\n        return (\r\n            <>\r\n                <CenterContainerCard cols={5}>\r\n                    <Box className='border-box'>\r\n                        <Form onSubmit={this.handleLoginClick}>\r\n                            <FormField isLine>\r\n                                Welcome back!\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <Input \r\n                                    id='username'\r\n                                    type=\"text\" \r\n                                    placeholder=\"Email\" \r\n                                    iconType='user' \r\n                                />\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <Input \r\n                                    id='password'\r\n                                    type=\"password\" \r\n                                    placeholder=\"Password\" \r\n                                    iconType='lock' \r\n                                />\r\n                            </FormField>\r\n                            <FormField isLine className='text flexible-center-equidistant-cells'>\r\n                                <Button toggle active={isRememberActive} \r\n                                    onClick={this.handleRememberClick}>\r\n                                    Remember me\r\n                                </Button> \r\n                                <FormField isLine onClick={onForgotPasswordClick}>\r\n                                    <View className='inline link'>Forgot password?</View>\r\n                                </FormField>\r\n                            </FormField>\r\n                            <FormField className='flexible' isLine>\r\n                                <Button type='submit' className='cell no-margin' primary>\r\n                                    Login\r\n                                </Button> \r\n                            </FormField>\r\n                            <FormField isLine onClick={onSignupClick}>\r\n                                Or <View className='inline link'>register now!</View>\r\n                            </FormField>\r\n                        </Form>\r\n                    </Box>\r\n                </CenterContainerCard>\r\n            </>\r\n        );\r\n    }\r\n}\r\nLogin.defaultProps = {\r\n    onRemember: _.noop,\r\n    onSignupClick: _.noop,\r\n    onForgotPasswordClick: _.noop,\r\n    onLogin: _.noop,\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport { CenterContainerCard } from 'components/centercontainercard';\r\nimport { Input, Form, FormField, Box, Button, View, FormInput, FormGroup } from 'blocks';\r\nimport { showToast } from 'utils/ui';\r\n\r\nexport default class Signup extends React.Component {\r\n    handleSignupClick = () => {\r\n        const input = this.getUserInput();\r\n        if (this.validateUserInput(input)) {\r\n            this.props.onSignup(input);\r\n        }\r\n    }\r\n\r\n    getUserInput() {\r\n        const form = document.forms[0];\r\n        const firstname = form.querySelector('#firstName').value;\r\n        const lastname = form.querySelector('#lastName').value;\r\n        const username = form.querySelector('#username').value;\r\n        const confirmpassword = form.querySelector('#confirmpassword').value;\r\n        const password = form.querySelector('#password').value;\r\n        return {\r\n            username,\r\n            password,\r\n            confirmpassword,\r\n            firstname,\r\n            lastname\r\n        };\r\n    }\r\n\r\n    validateUserInput({ username, password, confirmpassword, firstname }) {\r\n        if (!firstname.trim()) {\r\n            showToast('Please enter your name', 'error');\r\n            return false;\r\n        } else if (!username.trim()) {\r\n            showToast('Username cannot be empty', 'error');\r\n            return false;\r\n        } else if (!password.trim()) {\r\n            showToast('Password cannot be empty', 'error');\r\n            return false;\r\n        } else if (!confirmpassword.trim()) {\r\n            showToast('Confirm password cannot be empty', 'error');\r\n            return false;\r\n        } else if (confirmpassword.trim() !== password.trim()) {\r\n            showToast('Password and Confirm password do not match', 'error');\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        const { onSigninClick } = this.props;\r\n        return (\r\n            <>\r\n                <CenterContainerCard cols={6}>\r\n                    <Box className='border-box'>\r\n                        <Form>\r\n                            <FormField isLine>\r\n                                Creating an account is quick and easy!\r\n                            </FormField>\r\n                            <FormGroup widths='equal'>\r\n                                <FormInput \r\n                                    id='firstName'\r\n                                    fluid \r\n                                    placeholder='First name' \r\n                                />\r\n                                <FormInput \r\n                                    id='lastName'\r\n                                    fluid \r\n                                    placeholder='Last name' \r\n                                />\r\n                            </FormGroup>\r\n                            <FormField isLine>\r\n                                <Input \r\n                                    id='username'\r\n                                    type=\"text\" \r\n                                    placeholder=\"Email\" \r\n                                />\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <Input \r\n                                    id='password'\r\n                                    type=\"password\" \r\n                                    placeholder=\"Password\" \r\n                                />\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <Input \r\n                                    id='confirmpassword'\r\n                                    type=\"password\" \r\n                                    placeholder=\"Confirm Password\" \r\n                                />\r\n                            </FormField>\r\n                            <FormField className='flexible' isLine>\r\n                                <Button className='cell' primary onClick={this.handleSignupClick}>\r\n                                    Register\r\n                                </Button> \r\n                            </FormField>\r\n                            <FormField isLine onClick={onSigninClick}>\r\n                                Or <View className='inline link'>Sign in.</View>\r\n                            </FormField>\r\n                        </Form>\r\n                    </Box>\r\n                </CenterContainerCard>\r\n            </>\r\n        );\r\n    }\r\n}\r\nSignup.defaultProps = {\r\n    onSignup: _.noop,\r\n    onSigninClick: _.noop,\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\nimport { showToast } from 'utils/ui';\r\n\r\nimport { CenterContainerCard } from 'components/centercontainercard';\r\nimport { Input, Form, FormField, Box, Button, ButtonGroup, ButtonOr } from 'blocks';\r\n\r\nexport default class ForgotPassword extends React.Component {\r\n    handleForgotPasswordClick = () => {\r\n        const input = this.getUserInput();\r\n        if (this.validateUserInput(input)) {\r\n            this.props.onForgotPassword(input);\r\n        }\r\n    }\r\n\r\n    getUserInput() {\r\n        const useremail = document.getElementById('useremail').value;\r\n        return {\r\n            useremail,\r\n        };\r\n    }\r\n\r\n    validateUserInput({ useremail }) {\r\n        if (!useremail.trim()) {\r\n            showToast('Please enter your Email', 'error');\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        const { onSigninClick } = this.props;\r\n        return (\r\n            <>\r\n                <CenterContainerCard cols={6}>\r\n                    <Box className='border-box'>\r\n                        <Form>\r\n                            <FormField isLine>\r\n                                Please enter your registered email ID\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <Input \r\n                                    id='useremail'\r\n                                    type=\"text\" \r\n                                    placeholder=\"Email\" \r\n                                    iconType='user' \r\n                                />\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <ButtonGroup>\r\n                                    <Button onClick={onSigninClick}>To Sign in</Button>\r\n                                    <ButtonOr />\r\n                                    <Button primary onClick={this.handleForgotPasswordClick}>\r\n                                        Get Verification Code\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </FormField>\r\n                        </Form>\r\n                    </Box>\r\n                </CenterContainerCard>\r\n            </>\r\n        );\r\n    }\r\n}\r\nForgotPassword.defaultProps = {\r\n    onForgotPassword: _.noop,\r\n    onRedirect: _.noop,\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport { CenterContainerCard } from 'components/centercontainercard';\r\nimport { Input, Form, FormField, Box, Button, ButtonGroup, ButtonOr, View } from 'blocks';\r\nimport { showToast } from 'utils/ui';\r\n\r\nexport default class Verification extends React.Component {\r\n    handleVerificationCodeSubmitClick = () => {\r\n        const input = this.getUserInput();\r\n        if (this.validateUserInput(input)) {\r\n            this.props.onSubmitVerificationCode(input.verificationCode);\r\n        }\r\n    }\r\n\r\n    getUserInput() {\r\n        const verificationCode = document.getElementById('verificationCode').value;\r\n        return {\r\n            verificationCode,\r\n        };\r\n    }\r\n\r\n    validateUserInput({ verificationCode }) {\r\n        if (!verificationCode.trim()) {\r\n            showToast('Please enter the verification code', 'error');\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        const { onResendVerificationCode, emailAddress, onSigninClick } = this.props;\r\n        return (\r\n            <>\r\n                <CenterContainerCard cols={6}>\r\n                    <Box className='border-box'>\r\n                        <Form>\r\n                            <FormField isLine>\r\n                                Please enter the verification code sent to <View className='inline link'>{emailAddress}</View>\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <Input \r\n                                    id='verificationCode'\r\n                                    type=\"text\" \r\n                                    placeholder=\"Verification Code\" \r\n                                    iconType='user secret' \r\n                                />\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <ButtonGroup>\r\n                                    <Button onClick={onResendVerificationCode}>Resend</Button>\r\n                                    <ButtonOr />\r\n                                    <Button primary onClick={this.handleVerificationCodeSubmitClick}>\r\n                                        Submit\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </FormField>\r\n                            <FormField isLine onClick={onSigninClick}>\r\n                                Or <View className='inline link'>Sign in.</View>\r\n                            </FormField>\r\n                        </Form>\r\n                    </Box>\r\n                </CenterContainerCard>\r\n            </>\r\n        );\r\n    }\r\n}\r\nVerification.propTypes = {\r\n    emailAddress: PropTypes.string.isRequired,\r\n};\r\nVerification.defaultProps = {\r\n    onResendVerificationCode: _.noop,\r\n    onSubmitVerificationCode: _.noop,\r\n    onSigninClick: _.noop,\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport { CenterContainerCard } from 'components/centercontainercard';\r\nimport { Input, Form, FormField, Box, Button, View } from 'blocks';\r\nimport { showToast } from 'utils/ui';\r\n\r\nexport default class ResetPassword extends React.Component {\r\n    handleResetPasswordClick = () => {\r\n        const input = this.getUserInput();\r\n        if (this.validateUserInput(input)) {\r\n            this.props.onResetPasswordClick(input);\r\n        }\r\n    }\r\n\r\n    getUserInput() {\r\n        const confirmpassword = document.getElementById('confirmpassword').value;\r\n        const password = document.getElementById('password').value;\r\n        return {\r\n            confirmpassword,\r\n            password\r\n        };\r\n    }\r\n\r\n    validateUserInput({ confirmpassword, password }) {\r\n        if (!password.trim()) {\r\n            showToast('Password cannot be empty', 'error');\r\n            return false;\r\n        } else if (!confirmpassword.trim()) {\r\n            showToast('Confirm password cannot be empty', 'error');\r\n            return false;\r\n        } else if (confirmpassword.trim() !== password.trim()) {\r\n            showToast('Password and Confirm password do not match', 'error');\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        const { onSigninClick } = this.props;\r\n        return (\r\n            <>\r\n                <CenterContainerCard cols={5}>\r\n                    <Box className='border-box'>\r\n                        <Form>\r\n                            <FormField isLine>\r\n                                Please enter the new password\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <Input \r\n                                    id='password'\r\n                                    type=\"password\" \r\n                                    placeholder=\"New Password\" \r\n                                    iconType='lock' \r\n                                />\r\n                            </FormField>\r\n                            <FormField isLine>\r\n                                <Input \r\n                                    id='confirmpassword'\r\n                                    type=\"password\" \r\n                                    placeholder=\"Confirm New Password\" \r\n                                    iconType='lock' \r\n                                />\r\n                            </FormField>\r\n                            <FormField className='flexible' isLine>\r\n                                <Button className='cell no-margin' primary onClick={this.handleResetPasswordClick}>\r\n                                    Reset\r\n                                </Button> \r\n                            </FormField>\r\n                            <FormField isLine onClick={onSigninClick}>\r\n                                Or <View className='inline link'>Sign in!</View>\r\n                            </FormField>\r\n                        </Form>\r\n                    </Box>\r\n                </CenterContainerCard>\r\n            </>\r\n        );\r\n    }\r\n}\r\nResetPassword.defaultProps = {\r\n    onSigninClick: _.noop,\r\n    onResetPasswordClick: _.noop,\r\n};","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport { LoginForm } from 'components/loginforms';\r\n\r\nclass Login extends React.Component {\r\n    handleRemember = (remember) => {\r\n\r\n    }\r\n\r\n    handleLogin = (userInput) => {\r\n        const { redirectTo, onLogin } = this.props;\r\n        const query = new URLSearchParams(this.props.location.search);\r\n        const redirectUrlFromSearch = query.get('redirectUrl');\r\n        onLogin(userInput, redirectUrlFromSearch || redirectTo);\r\n    }\r\n\r\n    handleSignup = () => this.props.onRedirect(this.props.signupPath)\r\n\r\n    handleForgotPassword = () => this.props.onRedirect(this.props.forgotpasswordPath)\r\n\r\n\r\n    render () {\r\n        return (\r\n            <>\r\n                <LoginForm \r\n                    onLogin={this.handleLogin}\r\n                    onRemember={this.handleRemember} \r\n                    onSignupClick={this.handleSignup}\r\n                    onForgotPasswordClick={this.handleForgotPassword}\r\n                />\r\n            </>\r\n        );        \r\n    }\r\n}\r\n\r\nexport default withRouter(Login);\r\nLogin.propTypes = {\r\n    signupPath: PropTypes.string.isRequired,\r\n    forgotpasswordPath: PropTypes.string.isRequired,\r\n};\r\nLogin.defaultProps = {\r\n    onLogin: _.noop,\r\n    onRedirect: _.noop,\r\n};","\r\nexport const ON_LOGIN = 'ON_LOGIN';\r\nexport const ON_LOGIN_SUCCESS = 'ON_LOGIN_SUCCESS';\r\nexport const ON_SIGNUP = 'ON_SIGNUP';\r\nexport const ON_FORGOT_PASSWORD = 'ON_FORGOT_PASSWORD';\r\nexport const ON_FORGOT_PASSWORD_SUCCESS = 'ON_FORGOT_PASSWORD_SUCCESS';\r\nexport const ON_VERIFICATION_CODE_SUBMIT = 'ON_VERIFICATION_CODE_SUBMIT';\r\nexport const ON_RESEND_VERIFICATION_CODE = 'ON_RESEND_VERIFICATION_CODE';\r\nexport const ON_RESET_PASSWORD = 'ON_RESET_PASSWORD';\r\n","import _ from 'lodash';\r\nimport * as actionTypes from './actiontypes';\r\n\r\nexport function onLogin({ username, password }, redirectUrl) {\r\n    return {\r\n        type: actionTypes.ON_LOGIN,\r\n        username,\r\n        password,\r\n        redirectUrl,\r\n    }\r\n}\r\n\r\nexport function onLoginSuccess() {\r\n    return {\r\n        type: actionTypes.ON_LOGIN_SUCCESS\r\n    }\r\n}\r\n\r\nexport function onSignup(userInput, redirectUrl) {\r\n    return {\r\n        type: actionTypes.ON_SIGNUP,\r\n        ...userInput,\r\n        redirectUrl,\r\n    }\r\n}\r\n\r\nexport function onSignupSuccess() {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport function onForgotPassword({ useremail }, redirectUrl) {\r\n    return {\r\n        type: actionTypes.ON_FORGOT_PASSWORD,\r\n        useremail,\r\n        redirectUrl,\r\n    }\r\n}\r\n\r\nexport function onForgotPasswordSuccess(useremail) {\r\n    return {\r\n        type: actionTypes.ON_FORGOT_PASSWORD_SUCCESS,\r\n        useremail\r\n    }\r\n}\r\n\r\nexport function onVerificatonCodeSubmit(code, redirectUrl) {\r\n    return {\r\n        type: actionTypes.ON_VERIFICATION_CODE_SUBMIT,\r\n        code,\r\n        redirectUrl,\r\n    }\r\n}\r\n\r\nexport function onResendVerificationCode(useremail) {\r\n    return {\r\n        type: actionTypes.ON_RESEND_VERIFICATION_CODE,\r\n        useremail\r\n    }\r\n}\r\n\r\nexport function onResetPassword(userInput, redirectUrl) {\r\n    return {\r\n        type: actionTypes.ON_RESET_PASSWORD,\r\n        ...userInput,\r\n        redirectUrl,\r\n    }\r\n}","export const REDIRECT_TO = 'REDIRECT_TO';\r\nexport const REDIRECT_TO_URL = 'REDIRECT_TO_URL'","import * as actionTypes from './actiontypes';\r\n\r\nexport function redirectTo(url) {\r\n    return {\r\n        type: actionTypes.REDIRECT_TO,\r\n        url,\r\n    }\r\n}","import { connect } from 'react-redux'\r\nimport Login from './login';\r\nimport * as actions from '../actions';\r\nimport { redirectTo } from 'modules/redirect/actions';\r\n\r\nexport default connect(\r\n    (state) => ({\r\n  \r\n    }),\r\n    (dispatch) => ({\r\n      onLogin: (userInput, redirectUrl) => dispatch(actions.onLogin(userInput, redirectUrl)),\r\n      onRedirect: (redirectUrl) => dispatch(redirectTo(redirectUrl)),\r\n    })\r\n)(Login);\r\n  ","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport { SignupForm } from 'components/loginforms';\r\n\r\nclass Signup extends React.Component {\r\n    handleSignup = (userInput) => {\r\n        const { redirectTo, onSignup } = this.props;\r\n        onSignup(userInput, redirectTo);\r\n    }\r\n\r\n    handleSignin = () => this.props.onRedirect(this.props.signinPath)\r\n\r\n    render () {\r\n        return (\r\n            <>\r\n                <SignupForm \r\n                    onSignup={this.handleSignup}\r\n                    onSigninClick={this.handleSignin}\r\n                />\r\n            </>\r\n        );        \r\n    }\r\n}\r\n\r\nexport default withRouter(Signup);\r\nSignup.propTypes = {\r\n    signinPath: PropTypes.string.isRequired,\r\n};\r\nSignup.defaultProps = {\r\n    onSignup: _.noop,\r\n    onRedirect: _.noop,\r\n};","import { connect } from 'react-redux'\r\nimport Signup from './signup';\r\nimport * as actions from '../actions';\r\nimport { redirectTo } from 'modules/redirect/actions';\r\n\r\nexport default connect(\r\n    (state) => ({\r\n  \r\n    }),\r\n    (dispatch) => ({\r\n      onSignup: (userInput, redirectUrl) => dispatch(actions.onSignup(userInput, redirectUrl)),\r\n      onRedirect: (redirectUrl) => dispatch(redirectTo(redirectUrl)),\r\n    })\r\n)(Signup);\r\n  ","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport { ForgotPasswordForm } from 'components/loginforms';\r\n\r\nclass ForgotPassword extends React.Component {\r\n    handleForgotPassword = (userInput) => {\r\n        const { redirectTo, onForgotPassword } = this.props;\r\n        onForgotPassword(userInput, redirectTo);\r\n    }\r\n\r\n    handleSignin = () => this.props.onRedirect(this.props.signinPath)\r\n\r\n    render () {\r\n        return (\r\n            <>\r\n                <ForgotPasswordForm \r\n                    onForgotPassword={this.handleForgotPassword}\r\n                    onSigninClick={this.handleSignin}\r\n                />\r\n            </>\r\n        );        \r\n    }\r\n}\r\n\r\nexport default withRouter(ForgotPassword);\r\nForgotPassword.propTypes = {\r\n    signinPath: PropTypes.string.isRequired,\r\n};\r\nForgotPassword.defaultProps = {\r\n    onForgotPassword: _.noop,\r\n    onRedirect: _.noop,\r\n};","import { connect } from 'react-redux'\r\nimport ForgotPassword from './forgotpassword';\r\nimport * as actions from '../actions';\r\nimport { redirectTo } from 'modules/redirect/actions';\r\n\r\nexport default connect(\r\n    (state) => ({\r\n      \r\n    }),\r\n    (dispatch) => ({\r\n      onForgotPassword: (userInput, redirectUrl) => {\r\n        return dispatch(actions.onForgotPassword(userInput, redirectUrl));\r\n      },\r\n      onRedirect: (redirectUrl) => dispatch(redirectTo(redirectUrl)),\r\n    })\r\n)(ForgotPassword);\r\n  ","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport { VerificationCodeForm } from 'components/loginforms';\r\n\r\nclass VerificationCode extends React.Component {\r\n\r\n    componentDidMount() {\r\n        if (!this.props.emailAddress) this.handleSignin();\r\n    }\r\n\r\n    handleVerificationCodeSubmit = (code) => {\r\n        const { redirectTo, onVerificationCodeSubmit } = this.props;\r\n        onVerificationCodeSubmit(code, redirectTo);\r\n    }\r\n\r\n    handleResendVerificationCode = () => {\r\n        const { onResendVerificationCode, emailAddress } = this.props;\r\n        onResendVerificationCode(emailAddress);\r\n    }\r\n\r\n    handleSignin = () => this.props.onRedirect(this.props.signinPath)\r\n\r\n    render () {\r\n        return (\r\n            <>\r\n                <VerificationCodeForm \r\n                    emailAddress={this.props.emailAddress}\r\n                    onResendVerificationCode={this.handleResendVerificationCode}\r\n                    onSubmitVerificationCode={this.handleVerificationCodeSubmit}\r\n                    onSigninClick={this.handleSignin}\r\n                />\r\n            </>\r\n        );        \r\n    }\r\n}\r\n\r\nexport default withRouter(VerificationCode);\r\n\r\nVerificationCode.propTypes = {\r\n    signinPath: PropTypes.string.isRequired,\r\n    emailAddress: PropTypes.string.isRequired,\r\n};\r\nVerificationCode.defaultProps = {\r\n    onForgotPassword: _.noop,\r\n    onRedirect: _.noop,\r\n};","import { connect } from 'react-redux'\r\nimport Verification from './verification';\r\nimport * as actions from '../actions';\r\nimport { redirectTo } from 'modules/redirect/actions';\r\n\r\nexport default connect(\r\n    (state) => ({\r\n      emailAddress: state.userManagement.resetPasswordForUserEmail,\r\n    }),\r\n    (dispatch) => ({\r\n      onResendVerificationCode: (emailAddress) => {\r\n        return dispatch(actions.onResendVerificationCode(emailAddress));\r\n      },\r\n      onVerificationCodeSubmit: (code, redirectUrl) => {\r\n        return dispatch(actions.onVerificatonCodeSubmit(code, redirectUrl));\r\n      },\r\n      onRedirect: (redirectUrl) => dispatch(redirectTo(redirectUrl)),\r\n    })\r\n)(Verification);\r\n  ","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nimport { ResetPasswordForm } from 'components/loginforms';\r\n\r\nclass ResetPassword extends React.Component {\r\n    handleResetPassword = (userInput) => {\r\n        const { redirectTo, onResetPassword } = this.props;\r\n        onResetPassword(userInput, redirectTo);\r\n    }\r\n\r\n    handleSignin = () => this.props.onRedirect(this.props.signinPath)\r\n\r\n    render () {\r\n        return (\r\n            <>\r\n                <ResetPasswordForm \r\n                    onResetPasswordClick={this.handleResetPassword}\r\n                    onSigninClick={this.handleSignin}\r\n                />\r\n            </>\r\n        );        \r\n    }\r\n}\r\n\r\nexport default withRouter(ResetPassword);\r\n\r\nResetPassword.propTypes = {\r\n    signinPath: PropTypes.string.isRequired,\r\n};\r\nResetPassword.defaultProps = {\r\n    onResetPassword: _.noop,\r\n    onRedirect: _.noop,\r\n};","import { connect } from 'react-redux'\r\nimport ResetPassword from './resetpassword';\r\nimport * as actions from '../actions';\r\nimport { redirectTo } from 'modules/redirect/actions';\r\n\r\nexport default connect(\r\n    null,\r\n    (dispatch) => ({\r\n        onResetPassword: (userInput, redirectUrl) => {\r\n            return dispatch(actions.onResetPassword(userInput, redirectUrl));\r\n        },\r\n        onRedirect: (redirectUrl) => dispatch(redirectTo(redirectUrl)),\r\n    })\r\n)(ResetPassword);\r\n  ","import React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nimport { Sidebar } from \"blocks\";\r\n\r\nimport \"styles/sidebar.scss\";\r\n\r\nconst logo = { src: \"https://react.semantic-ui.com/logo.png\" };\r\nconst menuItems = [\r\n  {\r\n    label: \"Dashboard\",\r\n    icon: \"dashboard\"\r\n  },\r\n  {\r\n    label: \"Links\",\r\n    icon: \"linkify\"\r\n  },\r\n  {\r\n    label: \"Overlays\",\r\n    icon: \"affiliatetheme\"\r\n  },\r\n  {\r\n    bottom: true,\r\n    label: \"Profile\",\r\n    icon: \"user outline\"\r\n  },\r\n  {\r\n    bottom: true,\r\n    label: \"Signout\",\r\n    icon: \"power off\"\r\n  },\r\n  {\r\n    bottom: true,\r\n    label: \"Collapse\",\r\n    icon: \"compress\"\r\n  }\r\n];\r\n\r\nconst expand = {\r\n  label: \"Expand\",\r\n  icon: \"expand\"\r\n};\r\n\r\nconst collapse = {\r\n  label: \"Collapse\",\r\n  icon: \"compress\"\r\n};\r\n\r\nexport default class SidebarComponent extends React.Component {\r\n  state = {\r\n    collapsed: false\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.menuItems = menuItems;\r\n    this.menuItems[menuItems.length - 1].onClick = this.handleContractMenu;\r\n  }\r\n\r\n  handleContractMenu = e => {\r\n    this.setState({ collapsed: true });\r\n    _.assign(this.menuItems[menuItems.length - 1], expand);\r\n    this.menuItems[menuItems.length - 1].onClick = this.handleExpandMenu;\r\n    this.forceUpdate();\r\n  };\r\n\r\n  handleExpandMenu = e => {\r\n    this.setState({ collapsed: false });\r\n    _.assign(this.menuItems[menuItems.length - 1], collapse);\r\n    this.menuItems[menuItems.length - 1].onClick = this.handleContractMenu;\r\n    this.forceUpdate();\r\n  };\r\n\r\n  render() {\r\n    const { collapsed } = this.state;\r\n    return (\r\n      <Sidebar logo={logo} menuItems={this.menuItems} collapsed={collapsed} />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport Sidebar from 'components/sidebar';\r\n\r\nexport default class Dashboard extends React.Component {\r\n    render() {\r\n        return <Sidebar />;\r\n    }\r\n}","import React from 'react';\r\nimport { Redirect, withRouter } from \"react-router-dom\";\r\n\r\nclass RedirectTo extends React.PureComponent {\r\n    state = {\r\n        currentUrl: '',\r\n    }\r\n\r\n    redirect() {\r\n        this.props.history.push(this.state.currentUrl);\r\n    }\r\n\r\n    shouldRedirect() {\r\n        if (this.props.redirectToUrl !== this.state.currentUrl) {\r\n            this.setState({ currentUrl: this.props.redirectToUrl }, this.redirect);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.shouldRedirect();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.shouldRedirect();\r\n    }\r\n    \r\n    render() {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default withRouter(RedirectTo);\r\n","import { connect } from 'react-redux';\r\nimport RedirectTo from './redirect';\r\n\r\nexport default connect(state => ({\r\n    redirectToUrl: state.redirect.currentURL,\r\n}))(RedirectTo)","import React from 'react';\r\n\r\nexport default class Links extends React.Component {\r\n    render() {\r\n        return null;\r\n    }\r\n}","import { connect } from 'react-redux';\r\nimport Links from './links';\r\n\r\nexport default connect(null, () => {\r\n\r\n})(Links);","import React from 'react';\r\nimport _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Route } from \"react-router-dom\";\r\n\r\nexport class PrivateRoute extends React.Component {\r\n    state = {\r\n      isAuthenticated: false, \r\n    };\r\n\r\n    componentDidMount() {\r\n      const { path, isAuthenticated, onRedirectToLogin } = this.props;\r\n      if (!isAuthenticated) {\r\n        onRedirectToLogin(path);\r\n      }\r\n    }\r\n\r\n    getIsAuthenticated = () => {\r\n      return true;\r\n    }\r\n\r\n    render() {\r\n      const { isAuthenticated, children, ...rest } = this.props;\r\n\r\n      if (!isAuthenticated) return null;\r\n      return (\r\n          <Route {...rest}>\r\n            {children}\r\n          </Route>\r\n      );\r\n    }\r\n}\r\n\r\nPrivateRoute.propTypes = {\r\n  onGetAuthenticated: PropTypes.bool,\r\n};\r\n\r\nPrivateRoute.defaultProps = {\r\n  onRedirectToLogin: _.noop,\r\n};\r\n","import { connect } from 'react-redux';\r\nimport { PrivateRoute } from './privateroute';\r\nimport { redirectTo } from 'modules/redirect/actions';\r\n\r\nexport default connect(\r\n  state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n  }),\r\n  dispatch => ({\r\n    onRedirectToLogin: (redirectBackTo) => dispatch(redirectTo(`/login?redirectUrl=${redirectBackTo}`))\r\n  })\r\n)(PrivateRoute);","import React from \"react\";\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nimport { \r\n  Login, Signup, ForgotPassword, Verification, RedirectTo, Dashboard, ResetPassword ,\r\n  Links\r\n} from 'modules';\r\nimport PrivateRoute from './index';\r\n\r\nexport default function Routes() {\r\n  return (\r\n    <Router basename='/advertise-overlays'>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to=\"/dashboard\" />\r\n          </Route>\r\n          <Route exact path=\"/login\">\r\n            <Login redirectTo='/dashboard' signupPath='/signup' forgotpasswordPath='/forgot-password' />\r\n          </Route>\r\n          <Route exact path=\"/signup\">\r\n            <Signup redirectTo='/dashboard' signinPath='/login' />\r\n          </Route>\r\n          <Route exact path=\"/forgot-password\">\r\n            <ForgotPassword redirectTo='/verification' signinPath='/login' />\r\n          </Route>\r\n          <Route exact path=\"/verification\">\r\n            <Verification redirectTo='/reset-password' signinPath='/login' />\r\n          </Route>\r\n          <Route exact path=\"/reset-password\">\r\n            <ResetPassword redirectTo='/login' signinPath='/login' />\r\n          </Route>\r\n          <PrivateRoute exact path='/dashboard'>\r\n              <Dashboard />\r\n          </PrivateRoute>\r\n          <PrivateRoute exact path='/links'>\r\n              <Links />\r\n          </PrivateRoute>\r\n        </Switch>\r\n        <RedirectTo />\r\n    </Router>\r\n  );\r\n}","import _ from 'lodash';\r\nimport * as actionypes from './actiontypes';\r\n\r\nconst initialState = {\r\n    currentURL: '',\r\n    prevURL: ''\r\n};\r\n\r\nexport default function redirectTo(state = initialState, action) {\r\n    switch(action.type) {\r\n        case actionypes.REDIRECT_TO:\r\n            return {\r\n                prevURL: state.currentURL,\r\n                currentURL: action.url\r\n            };\r\n        default:\r\n            return state;\r\n    };\r\n}","export const ON_AUTHENTICATION_SUCCESS = 'ON_AUTHENTICATION_SUCCESS';","import _ from 'lodash';\r\nimport * as actionypes from './actiontypes';\r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n    token: ''\r\n};\r\n\r\nexport default function auth(state = initialState, action) {\r\n    switch(action.type) {\r\n        case actionypes.ON_AUTHENTICATION_SUCCESS:\r\n            return {\r\n                isAuthenticated: true,\r\n                token: 'xyz',\r\n            };\r\n        default:\r\n            return state;\r\n    };\r\n}","import _ from 'lodash';\r\nimport * as actionypes from './actiontypes';\r\n\r\nconst initialState = {\r\n    resetPasswordForUserEmail: '',\r\n};\r\n\r\nexport default function userManagement(state = initialState, action) {\r\n    switch(action.type) {\r\n        case actionypes.ON_FORGOT_PASSWORD_SUCCESS:\r\n            return {\r\n                resetPasswordForUserEmail: action.useremail,\r\n            };\r\n        default:\r\n            return state;\r\n    };\r\n}","import { combineReducers } from 'redux'\r\n\r\nimport redirect from 'modules/redirect/reducer';\r\nimport auth from 'modules/router/reducer';\r\nimport userManagement from 'modules/login/reducer';\r\n\r\nexport default combineReducers({\r\n  redirect,\r\n  auth,\r\n  userManagement,\r\n})","import { takeLatest, put } from 'redux-tale/es/effects';\r\nimport * as redirectActions from 'modules/redirect/actions';\r\nimport * as authActions from 'modules/router/actions';\r\nimport * as actionTypes from './actiontypes';\r\nimport * as actions from './actions';\r\nimport { showToast } from 'utils/ui';\r\n\r\nfunction* onLogin({ username, password, redirectUrl }) {\r\n    try {\r\n        yield Promise.resolve(true);\r\n        yield put(authActions.onLoginSuccess());\r\n        yield put(redirectActions.redirectTo(redirectUrl));\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nfunction* onSignup({ redirectUrl, ...userInputs }) {\r\n    try {\r\n        yield Promise.resolve(true);\r\n        yield onLogin({ ...userInputs, redirectUrl });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nfunction* onForgotPassword({ redirectUrl, useremail }) {\r\n    try {\r\n        yield Promise.resolve(true);\r\n        yield put(actions.onForgotPasswordSuccess(useremail));\r\n        showToast(`A Verification code has been sent to ${useremail}.`, 'success');\r\n        yield put(redirectActions.redirectTo(redirectUrl));\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nfunction* onResendVerificationCode({ useremail }) {\r\n    try {\r\n        yield Promise.resolve(true);\r\n        showToast(`Verification code resent to ${useremail}`, 'success');\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nfunction* onVerificationCodeSubmit({ code, redirectUrl }) {\r\n    try {\r\n        yield Promise.resolve(true);\r\n        yield put(redirectActions.redirectTo(redirectUrl));\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nfunction* onResetPassword({ redirectUrl, ...userInputs }) {\r\n    try {\r\n        yield Promise.resolve(true);\r\n        // yield put(authActions.onResetPasswordSuccess());\r\n        yield put(redirectActions.redirectTo(redirectUrl));\r\n        showToast(`Your password has been changed successfully.`, 'success');\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nconst onLoginSaga = takeLatest(actionTypes.ON_LOGIN, onLogin);\r\nconst onSignupSaga = takeLatest(actionTypes.ON_SIGNUP, onSignup);\r\nconst onForgotPasswordSaga = takeLatest(actionTypes.ON_FORGOT_PASSWORD, onForgotPassword);\r\nconst onResendVerificationCodeSaga = takeLatest(actionTypes.ON_RESEND_VERIFICATION_CODE, onResendVerificationCode);\r\nconst onVerificationCodeSubmitSaga = takeLatest(actionTypes.ON_VERIFICATION_CODE_SUBMIT, onVerificationCodeSubmit);\r\nconst onResetPasswordSaga = takeLatest(actionTypes.ON_RESET_PASSWORD, onResetPassword);\r\n\r\nexport default [\r\n    onLoginSaga,\r\n    onSignupSaga,\r\n    onForgotPasswordSaga,\r\n    onResendVerificationCodeSaga,\r\n    onVerificationCodeSubmitSaga,\r\n    onResetPasswordSaga\r\n];","import * as actionTypes from './actiontypes';\r\n\r\nexport function onLoginSuccess() {\r\n    return {\r\n        type: actionTypes.ON_AUTHENTICATION_SUCCESS\r\n    }\r\n}","import * as actions from './actions';\r\nimport * as actionTypes from './actiontypes';\r\nimport { takeLatest } from 'redux-tale/es/effects';\r\n\r\nfunction onRedirect({ url }) {\r\n    actions.redirectTo(url);\r\n}\r\n\r\nconst onRedirectSaga = takeLatest(actionTypes.REDIRECT_TO_URL, onRedirect);\r\n\r\nexport default [\r\n    onRedirectSaga,\r\n];","import createTaleMiddleware from 'redux-tale/es/';\r\n\r\nimport loginSagas from 'modules/login/saga';\r\nimport redirectSagas from 'modules/redirect/saga';\r\n\r\nlet sagaMiddleware;\r\n\r\nconst sagas = [\r\n    ...loginSagas,\r\n    ...redirectSagas,\r\n];\r\n\r\nexport function createSagaMiddleWare() {\r\n    sagaMiddleware = createTaleMiddleware();\r\n    return sagaMiddleware;\r\n}\r\n\r\nexport function runSagas() {\r\n    sagas.map(saga => sagaMiddleware.run(saga));\r\n}","import React from 'react';\r\nimport { Routes } from 'modules';\r\nimport { Provider } from 'react-redux';\r\nimport initStore from './store.js';\r\n\r\nconst store = initStore();\r\n\r\nfunction App() {\r\n  return (\r\n      <Provider store={store}>\r\n        <Routes />\r\n      </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport combinedReducers from './reducers';\r\nimport { createSagaMiddleWare, runSagas } from './sagas';\r\nimport { loadStateToken, saveStateToken} from 'utils/helper';\r\n\r\nexport default function initStore() {\r\n    const store = createStore(\r\n        combinedReducers,\r\n        loadStateToken(),\r\n        compose(\r\n            applyMiddleware(createSagaMiddleWare())\r\n        )\r\n    );\r\n    store.subscribe(() => saveStateToken(store.getState()));\r\n    runSagas();\r\n    return store;\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from 'app';\r\nimport 'styles/index.scss';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}